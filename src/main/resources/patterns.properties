# Language specific regular expressions
#
# The class LanguageRules loads and compiles all regular expressions except ".replace"
#
# The properties ended with ".isCorrect" used in LanguageRules.is method.
#
positiveAnswer.isCorrect  = (y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?
negativeAnswer.isCorrect  = (n|no( way)?|nah|nope|negative|i don't think so|yeah no)[.!]?

# Properties used for method ask("animal")
#
# The first property used to test user input and the other properties
# are used for post processing the data. The method find the first
# pattern that matches the user input and return result of function
# userInput.replaceFirst("<pattern>", "<replace>").
#
# In case if no pattern match the user input returned unmodified.
#
# The number is rules (pattern & replace) is unlimited.
#
animal.isCorrect        = (the |an? )?..+
animal.1.pattern        = ^(an? .+)
animal.1.replace        = $1
animal.2.pattern        = ^(the )?([aeiou].+)
animal.2.replace        = an $2
animal.3.pattern        = ^(the )?(.+)
animal.3.replace        = a $2

# This regular expressions used for method ask("statement")
#
# We allow to accept not only the statements but questions as well.
#
# The additional postprocessing expressions transform question into
# the regular statement and cut ending punctuation symbol.
#
statement.isCorrect     = ([Ii]t (can|has|is)|([hH]as|[cC]an|[iI]s) it|does it have) .+
statement.1.pattern     = ([Ii]t (has|can|is) (.+?))\\.?$
statement.1.replace     = it $2 $3
statement.2.pattern     = [Cc]an it (.+?)[.?]?$
statement.2.replace     = it can $1
statement.3.pattern     = [Ii]s it (.+?)[.?]?$
statement.3.replace     = it is $1
statement.4.pattern     = [dD]oes it have (.+?)[.?]?$
statement.4.replace     = it has $1

# ---

question.1.pattern      = it has (.+)
question.1.replace      = does it have $1?
question.2.pattern      = it (can|is) (.+)
question.2.replace      = $1 it $2?

definite.1.pattern      = an? (.*)
definite.1.replace      = the $1

negative.1.pattern      = it can (.+)
negative.1.replace      = it can't $1
negative.2.pattern      = it has (.+)
negative.2.replace      = it doesn't have $1
negative.3.pattern      = it is (.+)
negative.3.replace      = it isn't $1

animalFact.1.pattern    = it (.+)
animalFact.1.replace    = %s $1

guessAnimal.1.pattern   = (.+)
guessAnimal.1.replace   = Is it $1?

animalStatement.1.pattern   = (.+)
animalStatement.1.replace   = It is $1.

animalName.1.pattern    = (an? )(.+)
animalName.1.replace    = $2

