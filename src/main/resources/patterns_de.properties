# Language specific regular expressions
#
# The class LanguageRules loads and compiles all regular expressions except ".replace"
#
# The properties ended with ".isCorrect" used in LanguageRules.is method.
#
positiveAnswer.isCorrect  = (j|ja|jawohl|stimmt|natürlich|korrekt|ganz sicher|darauf kannst du wetten|exakt)[.!]?
negativeAnswer.isCorrect  = (n|nein|nee|niemals|falsch|ich denke nein|stimmt nicht)[.!]?

# Properties used for method ask("animal")
#
# The first property used to test user input and the other properties
# are used for post processing the data. The method find the first
# pattern that matches the user input and return result of function
# userInput.replaceFirst("<pattern>", "<replace>").
#
# In case if no pattern match the user input returned unmodified.
#
# The number is rules (pattern & replace) is unlimited.
#
animal.isCorrect        = (der |die | das |eine? )[A-Z].+
animal.1.pattern        = ^(eine? .+)
animal.1.replace        = $1
animal.2.pattern        = ^(der |das )(.+)
animal.2.replace        = ein $2
animal.3.pattern        = ^(die )(.+)
animal.3.replace        = eine $2

# This regular expressions used for method ask("statement")
#
# We allow to accept not only the statements but questions as well.
#
# The additional postprocessing expressions transform question into
# the regular statement and cut ending punctuation symbol.
#
statement.isCorrect     = (([Ee][rs]|[Ss]ie) (kann|hat|ist)|(hat|kann|ist) ([Ee][rs]|[Ss]ie)) .+
statement.1.pattern     = (([Ee][rs]|[Ss]ie) (hat|kann|ist) (.+?))\\.?$
statement.1.replace     = es $3 $4
statement.2.pattern     = (hat|kann|ist) ([Ee][rs]|[Ss]ie) (.+?)[.?]?$
statement.2.replace     = es $1 $3

# ---

question.1.pattern      = es (hat|ist|kann) (.+)
question.1.replace      = $1 es $2?

definite.1.pattern      = eine (.*)
definite.1.replace      = die $1
definite.2.pattern      = ein (.*)
definite.2.replace      = der/das $1

negative.1.pattern      = es kann (.+)
negative.1.replace      = es kann nicht $1
negative.2.pattern      = es hat (.+)
negative.2.replace      = es hat keine $1
negative.3.pattern      = es ist (.+)
negative.3.replace      = es ist nicht $1

animalFact.1.pattern    = es (.+)
animalFact.1.replace    = %s $1

guessAnimal.1.pattern   = (.+)
guessAnimal.1.replace   = Ist es $1?

animalStatement.1.pattern   = (.+)
animalStatement.1.replace   = Es ist $1.

animalName.1.pattern    = (eine? )(.+)
animalName.1.replace    = $2

